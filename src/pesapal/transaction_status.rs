//! Get transaction status
//! Once Pesapal redirect your customer to your callback URL and triggers your
//! IPN URL, you need to check the status of the payment using the
//! OrderTrackingId.

use derive_builder::Builder;
use serde::Deserialize;

const TRANSACTION_STATUS_URL: &str = "api/Transactions/GetTransactionStatus";

use serde_aux::prelude::deserialize_number_from_string;
use serde_repr::Deserialize_repr;

use crate::error::TransactionStatusError;
use crate::{PesaPal, PesaPalError, PesaPalResult};

#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TransactionStatusResponse {
    /// This refers to the payment method used by your customers to make
    /// payment.
    pub payment_method: String,
    /// Amount paid by the customer.
    pub amount: u64,
    /// Date the payment was made.
    pub created_date: String,
    /// Confirmation code received from the payment provider used.
    pub confirmation_code: String,
    /// Contains the status of the transaction
    pub payment_status_description: StatusCode,
    /// This is the description of the payment status.
    pub description: String,
    /// This message shows if the transaction was successful or not.
    pub message: String,
    /// Masked card/payment account number used by the customer to make
    pub payment_account: String,
    /// A valid URL which pesapal will redirect your customer to after
    /// payment. This is the URL you provided when you initiated the payment.
    pub call_back_url: String,
    /// Pesapal status code representing the status of the transaction.
    /// 0 = Invalid
    /// 1 = Completed
    /// 2 = Failed
    /// 3 = Reversed
    pub status_code: StatusCode,
    /// Your application's unique ID as received in the SubmitOrderRequest call.
    pub merchant_reference: String,
    ///Currency the payment was made in. ISO Currency Codes.
    pub currency: String,
    /// An error object containing error_type, code, message and call_back_url.
    pub error: TransactionStatusError,
    /// HTTP status code as defined on RFC 2616. A status of 200 means the
    /// request was successful.
    #[serde(deserialize_with = "deserialize_number_from_string")]
    pub status: u16,
}
#[derive(Debug, Deserialize_repr)]
#[repr(u8)]
#[serde(rename_all = "UPPERCASE")]
pub enum StatusCode {
    Invalid = 0,

    Completed = 1,
    Failed = 2,
    Reversed = 3,
}

impl TryFrom<u8> for StatusCode {
    type Error = PesaPalError;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(StatusCode::Invalid),
            1 => Ok(StatusCode::Completed),
            2 => Ok(StatusCode::Failed),
            3 => Ok(StatusCode::Reversed),
            _ => Err(PesaPalError::Internal("Invalid status code".to_string())),
        }
    }
}

impl From<StatusCode> for u8 {
    fn from(status: StatusCode) -> Self {
        status as u8
    }
}

#[derive(Debug, Builder)]
pub struct TransactionStatus<'pesa> {
    #[builder(pattern = "owned")]
    /// Pesapal Client
    pub client: &'pesa PesaPal,
    #[builder(setter(into))]
    /// Unique order id generated by Pesapal
    pub order_tracking_id: String,
}

impl<'pesa> TransactionStatus<'pesa> {
    /// Initiates a new [TransactionStatusBuilder]
    pub(crate) fn builder(client: &'pesa PesaPal) -> TransactionStatusBuilder {
        TransactionStatusBuilder::default().client(client)
    }

    /// # Sends a Transaction Status Request
    ///
    /// Sends a transaction status request to Pesapal
    ///
    /// ## Returns
    ///
    /// Returns a [TransactionStatusResponse] if the request was successful
    ///
    /// ## Errors
    ///
    /// [PesaPalError::TransactionStatusError] - with status 500 and error
    /// message incase the refund
    pub async fn send(&self) -> PesaPalResult<TransactionStatusResponse> {
        let url = format!("{}/{TRANSACTION_STATUS_URL}", self.client.env.base_url());

        let response = self
            .client
            .http_client
            .get(url)
            .bearer_auth(&self.client.authenticate().await?.token)
            .query(&[("OrderTrackingId", &self.order_tracking_id)])
            .send()
            .await?;

        let res: TransactionStatusResponse = response.json().await?;

        if res.status != 200 {
            return Err(PesaPalError::TransactionStatusError(res.error));
        }

        Ok(res)
    }
}
