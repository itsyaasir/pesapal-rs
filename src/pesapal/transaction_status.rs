//! Get transaction status
//! Once Pesapal redirect your customer to your callback URL and triggers your
//! IPN URL, you need to check the status of the payment using the
//! OrderTrackingId.

use derive_builder::Builder;
use serde::{Deserialize, Serialize};

const TRANSACTION_STATUS_URL: &str = "api/Transactions/GetTransactionStatus";

use serde_aux::prelude::deserialize_number_from_string;
use serde_json::Value;
use serde_repr::Deserialize_repr;

use crate::{PesaPal, PesaPalResult};

#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TransactionStatusResponse {
    /// This refers to the payment method used by your customers to make
    /// payment.
    pub payment_method: String,
    /// Amount paid by the customer.
    pub amount: u64,
    /// Date the payment was made.
    pub created_date: String,
    /// Confirmation code received from the payment provider used.
    pub confirmation_code: String,
    /// Contains the status of the transaction
    pub payment_status_description: StatusCode,
    pub description: String,
    pub message: String,
    pub payment_account: String,
    pub call_back_url: String,
    pub status_code: StatusCode,
    pub merchant_reference: String,
    pub payment_status_code: String,
    pub currency: String,
    pub error: Error,
    #[serde(deserialize_with = "deserialize_number_from_string")]
    pub status: String,
}
#[derive(Debug, Deserialize_repr)]
#[repr(u8)]
#[serde(rename_all = "UPPERCASE")]
pub enum StatusCode {
    Invalid = 0,

    Completed = 1,
    Failed = 2,
    Reversed = 3,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Error {
    #[serde(rename = "error_type")]
    pub error_type: Value,
    pub code: Value,
    pub message: Value,
    #[serde(rename = "call_back_url")]
    pub call_back_url: Value,
}

#[derive(Debug, Builder)]
pub struct TransactionStatus<'pesa> {
    #[builder(pattern = "owned")]
    /// Pesapal Client
    pub client: &'pesa PesaPal,
    #[builder(setter(into))]
    /// Unique order id generated by Pesapal
    pub order_tracking_id: String,
}

impl<'pesa> TransactionStatus<'pesa> {
    /// Initiates a new [TransactionStatusBuilder]
    pub(crate) fn builder(client: &'pesa PesaPal) -> TransactionStatusBuilder {
        TransactionStatusBuilder::default().client(client)
    }

    pub async fn send(&self) -> PesaPalResult<TransactionStatusResponse> {
        let url = format!("{}/{TRANSACTION_STATUS_URL}", self.client.env.base_url());

        let response = self
            .client
            .http_client
            .get(url)
            .bearer_auth(&self.client.authenticate().await?.token)
            .query(&[("OrderTrackingId", &self.order_tracking_id)])
            .send()
            .await?;

        panic!()
    }
}
